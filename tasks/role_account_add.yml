---
# yamllint disable rule:line-length
###############################################################################
# Add User/Group for Role
###############################################################################
# Adds a given user/group for calling role.
#
# Steps are exactly the same as user steps but included in one task to make
# external role consumption easy. Always change {user,group}.yml when making
# changes here, unless those changes are defaults.

- name: 'Role account add | install packages'
  ansible.builtin.include_role:
    name: 'r_pufky.srv.apt'
  vars:
    apt_packages:
      - '{{ users_role_packages }}'
      - '{{ users_role_high_entropy_packages if users_high_entropy_enable else [] }}'
      - '{{ users_role_ssh_keygen_packages }}'
    apt_package_update_cache: true

- name: 'Role account add | query user {{ users_role_user.name | default("") }}'
  when: users_role_create_user
  ansible.builtin.command: 'id {{ users_role_user.name }}'
  register: users_role_user_role_user_exists
  changed_when: users_role_user_role_user_exists.rc > 0
  failed_when: false

- name: 'Role account add | query group {{ users_role_group.name | default("") }}'
  when: users_role_create_group
  ansible.builtin.command: 'groups {{ users_role_group.name }}'
  register: users_role_user_role_group_exists
  changed_when: users_role_user_role_group_exists.rc > 0
  failed_when: false

- name: 'Role account add | create group {{ users_role_group.name | default("") }}'
  when: users_role_create_group and users_role_user_role_group_exists.rc != 0
  ansible.builtin.group:
    force: '{{ users_role_group.force | default(false) }}'
    gid: '{{ users_role_group.gid | default(omit) }}'
    local: '{{ users_role_group.local | default(false) }}'
    name: '{{ users_role_group.name }}'
    non_unique: '{{ users_role_group.non_unique | default(false) }}'
    state: 'present'
    system: '{{ users_role_group.system | default(false) }}'

- name: 'Role account add | create user {{ users_role_user.name | default("") }} {{ users_role_user.comment | default("") }}'  # noqa name[template] readability
  when: users_role_create_user and users_role_user_role_user_exists.rc != 0
  ansible.builtin.user:
    append: '{{ users_role_user.append | default(false) }}'
    authorization: '{{ users_role_user.authorization | default(omit) }}'
    comment: '{{ users_role_user.comment | default(omit) }}'
    create_home: '{{ users_role_user.create_home | default(true) }}'
    expires: '{{ users_role_user.expires | default(-1) }}'
    force: '{{ users_role_user.force | default(false) }}'
    generate_ssh_key: '{{ users_role_user.generate_ssh_key | default(false) }}'
    group: '{{ users_role_user.group | default(omit) }}'
    groups: '{{ users_role_user.groups | default(omit) }}'
    hidden: '{{ users_role_user.hidden | default(omit) }}'
    home: '{{ users_role_user.home | default("/nonexistent") }}'
    local: '{{ users_role_user.local | default(false) }}'
    login_class: '{{ users_role_user.login_class | default(omit) }}'
    move_home: '{{ users_role_user.move_home | default(false) }}'
    name: '{{ users_role_user.name }}'
    non_unique: '{{ users_role_user.non_unique | default(false) }}'
    password: '{{ users_role_user.password | default("!") }}'
    password_expire_max: '{{ users_role_user.password_expire_max | default(omit) }}'
    password_expire_min: '{{ users_role_user.password_expire_min | default(omit) }}'
    password_expire_warn: '{{ users_role_user.password_expire_warn | default(omit) }}'
    password_lock: '{{ users_role_user.password_lock | default(false) }}'
    profile: '{{ users_role_user.profile | default(omit) }}'
    remove: '{{ users_role_user.remove | default(false) }}'
    role: '{{ users_role_user.role | default(omit) }}'
    seuser: '{{ users_role_user.seuser | default(omit) }}'
    shell: '{{ users_role_user.shell | default("/usr/sbin/nologin") }}'
    skeleton: '{{ users_role_user.skeleton | default(omit) }}'
    ssh_key_bits: '{{ users_role_user.ssh_key_bits | default(omit) }}'
    ssh_key_comment: '{{ users_role_user.ssh_key_comment | default("ansible-generated") }}'
    ssh_key_file: '{{ users_role_user.ssh_key_file | default(".ssh/id_rsa") }}'
    ssh_key_passphrase: '{{ users_role_user.ssh_key_passphrase | default(lookup("ansible.builtin.password", "/dev/null", chars=["ascii_letters", "digits"], length=32)) }}'
    ssh_key_type: '{{ users_role_user.ssh_key_type | default("rsa") }}'
    state: 'present'
    system: '{{ users_role_user.system | default(false) }}'
    uid: '{{ users_role_user.uid | default(omit) }}'
    umask: '{{ users_role_user.umask | default(omit) }}'
    update_password: '{{ users_role_user.update_password | default("always") }}'

- name: 'Role account add | process extensions'
  when: users_role_user.extensions is defined
  block:
    - name: 'Role account add | apply extended SSH configuration'
      when: users_role_user.extensions.ssh is defined
      block:
        - name: 'Role account add | secure SSH directory'
          ansible.builtin.file:
            path: '{{ users_role_user.home }}/.ssh'
            owner: '{{ users_role_user.name }}'
            group: '{{ users_role_user.group }}'
            mode: '0700'
            state: 'directory'

        - name: 'User | add authorized keys'
          when: users_role_user.extensions.ssh.authorized_keys is defined
          ansible.posix.authorized_key:
            user: '{{ users_role_user.name }}'
            key: '{{ item.key }}'
            key_options: '{{ item.key_options | default(omit) }}'
            manage_dir: '{{ item.manage_dir | default(true) }}'
            path: '{{ item.path | default(omit) }}'
            comment: '{{ item.comment | default(omit) }}'
            exclusive: '{{ item.exclusive | default(false) }}'
            follow: '{{ item.follow | default(false) }}'
            validate_certs: '{{ item.validate_certs | default(true) }}'
            state: '{{ item.state | default("present") }}'
          loop: '{{ users_role_user.extensions.ssh.authorized_keys }}'

        # Keep inline instead of include_tasks loop for singular role import.
        - name: 'User | manage SSH keys'
          when: users_role_user.extensions.ssh.ssh_keys is defined
          block:
            - name: 'User | manage SSH keys | add private'
              when: item.state | default("present") == 'present'
              ansible.builtin.copy:
                dest: '{{ users_role_user.home }}/.ssh/{{ item.name | default("id_rsa") }}'
                owner: '{{ users_role_user.name }}'
                group: '{{ users_role_user.group }}'
                mode: '0400'
                content: '{{ item.private }}'
              loop: '{{ users_role_user.extensions.ssh.ssh_keys }}'
              no_log: true  # private key

            - name: 'User | manage SSH keys | add public'
              when: item.state | default("present") == 'present'
              ansible.builtin.copy:
                dest: '{{ users_role_user.home }}/.ssh/{{ item.name | default("id_rsa") }}.pub'
                owner: '{{ users_role_user.name }}'
                group: '{{ users_role_user.group }}'
                mode: '0640'  # prevent file thrashing if lockdown is set.
                content: '{{ item.public }}'
              loop: '{{ users_role_user.extensions.ssh.ssh_keys }}'
              no_log: true  # private key

            - name: 'User | manage SSH keys | remove private'
              when: item.state | default("present") == 'absent'
              ansible.builtin.file:
                path: '{{ users_role_user.home }}/.ssh/{{ item.name | default("id_rsa") }}'
                state: 'absent'
              loop: '{{ users_role_user.extensions.ssh.ssh_keys }}'
              no_log: true  # private key

            - name: 'User | manage SSH keys | remove public'
              when: item.state | default("present") == 'absent'
              ansible.builtin.file:
                path: '{{ users_role_user.home }}/.ssh/{{ item.name | default("id_rsa") }}.pub'
                state: 'absent'
              loop: '{{ users_role_user.extensions.ssh.ssh_keys }}'
              no_log: true  # private key

        - name: 'Role account add | set SSH config'
          when: users_role_user.extensions.ssh.config is defined
          ansible.builtin.template:
            src: 'ssh/config.j2'
            dest: '{{ users_role_user.home }}/.ssh/config'
            owner: '{{ users_role_user.name }}'
            group: '{{ users_role_user.group }}'
            mode: '0400'
          vars:
            _users: '{{ users_role_user }}'

    - name: 'Role account add | config sudoers'
      when: users_role_user.extensions.sudoers is defined
      community.general.sudoers:
        commands: '{{ users_role_user.extensions.sudoers.commands | default(omit) }}'
        group: '{{ users_role_user.extensions.sudoers.group | default(omit) }}'
        host: '{{ users_role_user.extensions.sudoers.host | default("ALL") }}'
        name: '{{ users_role_user.extensions.sudoers.name }}'
        noexec: '{{ users_role_user.extensions.sudoers.noexec | default(false) }}'
        nopassword: '{{ users_role_user.extensions.sudoers.nopassword | default(true) }}'
        runas: '{{ users_role_user.extensions.sudoers.runas | default(omit) }}'
        setenv: '{{ users_role_user.extensions.sudoers.setenv | default(false) }}'
        state: '{{ users_role_user.extensions.sudoers.state | default("present") }}'
        sudoers_path: '{{ users_role_user.extensions.sudoers.sudoers_path | default("/etc/sudoers.d") }}'
        user: '{{ users_role_user.extensions.sudoers.user | default(omit) }}'
        validation: '{{ users_role_user.extensions.sudoers.validation | default("detect") }}'

    - name: 'Role account add | configure gnupg'
      when: users_role_user.extensions.gpg is defined and users_role_user.extensions.gpg | length > 0
      ansible.builtin.include_tasks: 'gnupg.yml'
      vars:
        _users: '{{ users_role_user }}'

    - name: 'Role account add | copy user data'
      when: users_role_user.extensions.copy_data is defined and users_role_user.extensions.copy_data
      ansible.builtin.copy:
        src: '{{ users_role_user.extensions.copy_data }}'
        dest: '{{ users_role_user.home }}'
        owner: '{{ users_role_user.name }}'
        group: '{{ users_role_user.name }}'
        force: true
        mode: '0600'
        directory_mode: '0700'

    - name: 'Role account add | lockdown home'
      when: users_role_user.extensions.lockdown is defined and users_role_user.extensions.lockdown
      ansible.builtin.command: 'chmod -R go-rwx {{ users_role_user.home }}'
      changed_when: false
